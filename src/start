#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# create the runit definitions for narc
directory '/etc/service/narc' do
  recursive true
end

file '/etc/service/narc/run' do
  mode 0755
  content <<-EOF
#!/bin/sh -e
export PATH="/opt/local/sbin:/opt/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/gonano/sbin:/opt/gonano/bin"

exec /opt/gonano/bin/narcd /opt/gonano/etc/narc.conf
  EOF
end

service 'narc' do
  action :enable
end

# Import service (and start)
directory '/etc/service/db' do
  recursive true
end

directory '/etc/service/db/log' do
  recursive true
end

template '/etc/service/db/log/run' do
  mode 0755
  source 'log-run.erb'
  variables ({ svc: "db" })
end

template '/etc/service/db/run' do
  mode 0755
  variables ({ exec: "influxd -config /data/etc/influxdb/influxdb.conf 2>&1" })
end

service 'db' do
  action :enable
  init :runit
end

ensure_socket 'db' do
  port '8086' # TODO: use configurable, or make not configurable in boxfile
  action :listening
end

# Attach the IP if provided
if payload[:ips]
  # set up persistance
  file "/etc/nanoinit.d/eth00" do
    content <<-EOF
#!/bin/bash
case $1 in
  start)
    if [[ ! $(ifconfig) =~ eth0:0 ]]; then
      ifconfig eth0:0 #{payload[:ips][:default]}
      arping -A -c 10 -I eth0 #{payload[:ips][:default]}
    fi
    ;;
  stop)
    if [[ $(ifconfig) =~ eth0:0 ]]; then
      ifconfig eth0:0 down
    fi
    ;;
  *)
    echo "$0 start|stop"
    exit 1
    ;;
esac
EOF
    mode 0755
  end

  # bring up interface
  execute "bring up vip" do
    command <<-EOF
      /etc/nanoinit.d/eth00 start
    EOF
  end
end
